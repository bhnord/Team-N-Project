plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id "io.freefair.lombok" version "5.0.0-rc6"
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
mainClassName = 'edu.wpi.TeamN.Main'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://apisite.crmyers.dev/maven'
    }
}

dependencies {
    implementation(
            'com.jfoenix:jfoenix:8.0.10',
            // You may comment out the database dependency you do not use
            'com.google.inject:guice:4.2.2',
            'org.xerial:sqlite-jdbc:3.30.1',
            'org.apache.derby:derby:10.14.2.0',

            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',
            'com.google.maps:google-maps-services:0.18.0',
            'org.slf4j:slf4j-simple:1.7.25'

    )
    testImplementation(
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
            'org.mockito:mockito-core:3.3.3',
            'org.mockito:mockito-junit-jupiter:3.3.3',
    )


    testCompile(
            "org.testfx:testfx-core:4.0.16-alpha",
            'org.junit.jupiter:junit-jupiter:5.6.0',
            'org.testfx:testfx-junit5:4.0.16-alpha',
    )
    compile group: 'commons-io', name: 'commons-io', version: '2.0.1'
}


test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}



def codeCoverageExcludes = [
        'edu.wpi.TeamN.App',
        'edu.wpi.TeamN.services.database.DatabaseServiceProvider',
        'edu.wpi.TeamN.services.*',
        'edu.wpi.TeamN.views.FXMLLoaderProvider',
        'edu.wpi.TeamN.views.HomeController',
        'edu.wpi.TeamN.Main',
        'edu.wpi.TeamN.state.HomeStateProvider',
        'edu.wpi.TeamN.App.1',
]
jacoco {
    toolVersion = "0.8.4"
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport
compileJava.dependsOn 'spotlessApply'

spotless {
    java {
        googleJavaFormat()
    }
}